Git Branchings 
--------------------------------------
Note : In .git folder, HEAD would always contain currently checkedout branch Reference .git/HEADS
	   Also, .git\refs\heads contains HEAD of all created branches on that repository 	

Git branching provides faster Context Switching

git branch  ( To list out all the branches)
git branch <new_branch_name> ( to create new branch)

The shorhand of creation of the branch and checking out at the same time is use"-b" while checkout
git checkout -b <new_branch_name>  ( it will create a new branch and checkout the same ) 


if you do git checkout and there are any changes on any of the existing file then GIT will not let you checkout any branch until you revert/stash/commit those changes; however, if any file that is newly added then GIT will not complain and it would simply let you checkout any other branch.


Comparing Branches
---------------------------------------------
git diff <onebranch>..<secondbranch> (After and before ".." not even we can pass any branch name, but also we can pass any tree-ish, sha, head details )
git diff master..new_feature^

git diff master..new_feature (Changes would be displayed in separate line)

git diff --color-words new_feature..master (Changes would be displayed in ONE line )


git branch --merged would display all the branches whose code is already merged with current branch or already contains the code from these branches. Example if our currenct branch is "new_feature" and git branch --merged returns "master, develop, shot_title" branches that means this branch does have all the tip of HEAD's/code of other listed branches.

Renaming Branches
---------------------------------------------------------
git branch -m/--move <current_branch_name> <new_branch_name>

git branch -m new_feature seo_title

Deleting branches
------------------------------------------------------------
git branch -d <branch_name_to_be_deleted>   ( Only delete if the branch is fully merged, else will throw an error while deletion)
git branch -D <branch_name_to_be_deleted>   ( Delete the branch irrespective of it's merge status)


Merging Code
-------------------------------------------------------------
Checkout the target directory on which you want to perform merge and then
git merge <source_branch_name>


real-merge : Merge made 'recursive strategy'

fast-forward merge : If the target branch has no commit since the source branch checkout then git simply perform the FAST-FORWARD approach while merging both of these branches. In this case there is no separate commit been made on the MASTER branch. To avoid fast forwarding we can used command "git merge --no--ff <branch_name>". So it forces git to make a new commit of a MERGE.

The other options are :
git merge --ff--only <branch_name> ( Here we are telling git that only merge if branch can be merged by FAST Forwarding, else abort the process)

In GIT merge there are three actions we can take
1. Abort merge : git merge --abort
2. Resolve the conflicts manually : resolve conflicts, and git add <conflict files>, then git commit
3. Use a merge tool : git mergetool --tools

Strategies to reduce conflicts
--------------------------------------------------
 - Keep lines short
 - Keep your commit small and focused
 - Beware stray edits to whitespace ( Spaces, Tabs, line returns)
 - Merge Often
 - Track changes to master ( merge Master changes to feature to keep that in SYNC)


 